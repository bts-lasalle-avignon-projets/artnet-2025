class Enum
!!!138626.php!!!	__construct(in value : mixed)
        if ($value instanceof static) {
           /** @psalm-var T */
            $value = $value->getValue();
        }

        /** @psalm-suppress ImplicitToStringCast assertValidValueReturningKey returns always a string but psalm has currently an issue here */
        $this->key = static::assertValidValueReturningKey($value);

        /** @psalm-var T */
        $this->value = $value;
!!!138754.php!!!	__wakeup()
        /** @psalm-suppress DocblockTypeContradiction key can be null when deserializing an enum without the key */
        if ($this->key === null) {
            /**
             * @psalm-suppress InaccessibleProperty key is not readonly as marked by psalm
             * @psalm-suppress PossiblyFalsePropertyAssignmentValue deserializing a case that was removed
             */
            $this->key = static::search($this->value);
        }
!!!138882.php!!!	from(in value : mixed) : static
        $key = static::assertValidValueReturningKey($value);

        return self::__callStatic($key, []);
!!!139010.php!!!	getValue() : mixed
        return $this->value;
!!!139138.php!!!	getKey() : string
        return $this->key;
!!!139266.php!!!	__toString() : string
        return (string)$this->value;
!!!139394.php!!!	equals(in variable :  = null) : bool
        return $variable instanceof self
            && $this->getValue() === $variable->getValue()
            && static::class === \get_class($variable);
!!!139522.php!!!	keys() : array
        return \array_keys(static::toArray());
!!!139650.php!!!	values() : static[]
        $values = array();

        /** @psalm-var T $value */
        foreach (static::toArray() as $key => $value) {
            /** @psalm-suppress UnsafeGenericInstantiation */
            $values[$key] = new static($value);
        }

        return $values;
!!!139778.php!!!	toArray() : array
        $class = static::class;

        if (!isset(static::$cache[$class])) {
            /** @psalm-suppress ImpureMethodCall this reflection API usage has no side-effects here */
            $reflection            = new \ReflectionClass($class);
            /** @psalm-suppress ImpureMethodCall this reflection API usage has no side-effects here */
            static::$cache[$class] = $reflection->getConstants();
        }

        return static::$cache[$class];
!!!139906.php!!!	isValid(in value : $value) : bool
        return \in_array($value, static::toArray(), true);
!!!140034.php!!!	assertValidValue(in value : mixed) : void
        self::assertValidValueReturningKey($value);
!!!140162.php!!!	assertValidValueReturningKey(in value : mixed) : string
        if (false === ($key = static::search($value))) {
            throw new \UnexpectedValueException("Value '$value' is not part of the enum " . static::class);
        }

        return $key;
!!!140290.php!!!	isValidKey(in key : $key) : bool
        $array = static::toArray();

        return isset($array[$key]) || \array_key_exists($key, $array);
!!!140418.php!!!	search(in value : mixed) : string|false
        return \array_search($value, static::toArray(), true);
!!!140546.php!!!	__callStatic(in name : string, in arguments : array) : static
        $class = static::class;
        if (!isset(self::$instances[$class][$name])) {
            $array = static::toArray();
            if (!isset($array[$name]) && !\array_key_exists($name, $array)) {
                $message = "No static method or enum constant '$name' in class " . static::class;
                throw new \BadMethodCallException($message);
            }
            /** @psalm-suppress UnsafeGenericInstantiation */
            return self::$instances[$class][$name] = new static($array[$name]);
        }
        return clone self::$instances[$class][$name];
!!!140674.php!!!	jsonSerialize() : mixed
        return $this->getValue();

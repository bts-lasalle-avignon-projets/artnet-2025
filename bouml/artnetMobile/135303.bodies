class Configuration
!!!138247.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_configuration);
        Log.d(TAG, "onCreate()");

        vue.initialiserNavbar(this);
        initialiserUI();
        initialiserListener();
!!!138375.java!!!	controlerEquipement() : void
        conteneurCanaux.removeAllViews();
        listeCanaux.clear();

        int nbCanaux = equipement.getNbCanaux();
        int adresse = equipement.getAdresseDMX();
        Vector<String> canaux = equipement.getCanaux();

        for (int i = 0; i < nbCanaux; i++) {
            LinearLayout blocCanal = new LinearLayout(Configuration.this);
            blocCanal.setOrientation(LinearLayout.VERTICAL);
            blocCanal.setPadding(16, 0, 16, 0);

            TextView valeurSlider = new TextView(Configuration.this);
            valeurSlider.setGravity(Gravity.CENTER);
            valeurSlider.setText("0");

            SeekBar slider = new SeekBar(Configuration.this);
            slider.setMax(255);
            slider.setMin(-1);
            slider.setProgress(equipement.getValeurCanaux(i));
            valeurSlider.setText(Integer.toString(equipement.getValeurCanaux(i)));
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(500, 100);
            slider.setLayoutParams(params);

            slider.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
                @Override
                public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                    valeurSlider.setText(String.valueOf(progress));
                }

                @Override
                public void onStartTrackingTouch(SeekBar seekBar) {}

                @Override
                public void onStopTrackingTouch(SeekBar seekBar) {}
            });

            TextView description = new TextView(Configuration.this);
            description.setText(canaux.get(i));
            description.setGravity(Gravity.CENTER);
            description.setTextSize(12);

            blocCanal.addView(valeurSlider);
            blocCanal.addView(slider);
            blocCanal.addView(description);
            conteneurCanaux.addView(blocCanal);

            listeCanaux.add(slider);
        }
!!!138503.java!!!	recupererValeurCanaux() : List<Integer>
        List<Integer> valeurs = new ArrayList<>();

        for (SeekBar slider : listeCanaux) {
            valeurs.add(slider.getProgress());
        }
        return valeurs;
!!!138631.java!!!	construireJson() : String
        JSONArray jsonArray = new JSONArray();
        List<Integer> valeurs = recupererValeurCanaux();
        int adresseBase = equipement.getAdresseDMX();

        for (int i = 0; i < valeurs.size(); i++) {
            int valeur = valeurs.get(i);
            equipement.setValeurCanaux(i, valeur);

            if(valeur != -1) {
                try {
                    org.json.JSONObject jsonCanal = new org.json.JSONObject();
                    jsonCanal.put("canal", adresseBase + i);
                    jsonCanal.put("valeur", valeur);
                    jsonArray.put(jsonCanal);
                } catch (Exception e) {
                    Log.e(TAG, "Erreur : ", e);
                }
            }
        }
        return jsonArray.toString();
!!!138759.java!!!	initialiserUI() : void

        rechercherEquipement = findViewById(R.id.boutonRechercherEquipements);
        boutonControlerEquipement = findViewById(R.id.boutonControler);
        boutonEnvoyerValeurs = findViewById(R.id.boutonEnvoyerCommande);
        boutonReset = findViewById(R.id.boutonReset);
        boutonSupprimerEquipement = findViewById(R.id.boutonSupprimer);

        spinnerUnivers = findViewById(R.id.spinnerUnivers);
        spinnerEquipement = findViewById(R.id.spinnerEquipement);
        conteneurCanaux = findViewById(R.id.conteneurControleCanaux);
        layoutControle = findViewById(R.id.controlerEquipement);

        ArrayAdapter<Univers> adapterUnivers = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, Univers.getListeUniversActif());
        adapterUnivers.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnerUnivers.setAdapter(adapterUnivers);
!!!138887.java!!!	initialiserListener() : void
        rechercherEquipement.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Object selectedItem = spinnerUnivers.getSelectedItem();

                if (selectedItem != null) {
                    univers = (Univers) selectedItem;
                    ArrayAdapter<EquipementDmx> adapterEquipement = new ArrayAdapter<>(Configuration.this, android.R.layout.simple_spinner_item, univers.getEquipements());
                    adapterEquipement.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                    spinnerEquipement.setAdapter(adapterEquipement);
                }
            }
        });

        boutonControlerEquipement.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Object selectedItem = spinnerEquipement.getSelectedItem();

                if (selectedItem != null) {
                    equipement = (EquipementDmx) selectedItem;
                    vue.afficherControlerEquipement(layoutControle);
                    controlerEquipement();
                }
            }
        });

        boutonEnvoyerValeurs.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    String topic = "artnet/univers";
                    String json = construireJson();
                    Log.d("JSON", "PUBLISH (envoyer valeurs) --> " + topic + "/" + univers.getNum() + " : " + json);
                    Toast.makeText(v.getContext(), "Valeurs envoyées à l'équipement : " + equipement.getNom(), Toast.LENGTH_SHORT).show();
                    communicationBroker.envoyer(topic, univers.getNum(), json);
                } catch (Exception e) {
                    Log.e(TAG, "Erreur :", e);
                }
            }
        });

        boutonReset.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                for (SeekBar slider : listeCanaux) {
                    slider.setProgress(-1);
                }
                String topic = "artnet/univers";
                String json = resetJSON();
                Log.d("JSON", "PUBLISH (envoyer valeurs) --> " + topic + "/" + univers.getNum() + " : " + json);
                Toast.makeText(v.getContext(), "Equipement réinitialisé : " + equipement.getNom(), Toast.LENGTH_SHORT).show();
                communicationBroker.envoyer(topic, univers.getNum(), json);
            }
        });

        boutonSupprimerEquipement.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String topic = "artnet/bdd/equipements/ecriture/" + Univers.rechercherUniversNum(equipement.getUnivers());
                Toast.makeText(v.getContext(), "Equipement supprimé : " + equipement.getNom(), Toast.LENGTH_SHORT).show();
                Log.d("JSON", "PUBLISH (supprimer equipement) --> " + topic);
                communicationBroker.envoyer(topic, equipement.getNom(), "");
                univers.retirerEquipement(equipement);
                layoutControle.removeAllViews();
            }
        });
!!!139015.java!!!	resetJSON() : String
        JSONArray jsonArray = new JSONArray();
        List<Integer> valeurs = recupererValeurCanaux();
        int adresseBase = equipement.getAdresseDMX();

        for (int i = 0; i < valeurs.size(); i++) {
            try {
                equipement.setValeurCanaux(i, 0);
                org.json.JSONObject jsonCanal = new org.json.JSONObject();
                jsonCanal.put("canal", adresseBase + i);
                jsonCanal.put("valeur", 0);
                jsonArray.put(jsonCanal);
            } catch (Exception e) {
                Log.e(TAG, "Erreur : ", e);
            }
        }
        return jsonArray.toString();
